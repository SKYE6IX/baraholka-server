{"version":3,"file":"parseServices.js","sourceRoot":"/","sources":["services/parseServices.ts"],"names":[],"mappings":"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","sourcesContent":["import OpenAI from \"openai\";\nimport { S3ServiceException } from \"@aws-sdk/client-s3\";\nimport TelegramBot from \"packages/TelegramBot\";\nimport GPTClient from \"packages/GPTClient\";\nimport S3 from \"packages/S3\";\nimport { createNewUser, isUserExist } from \"./userServices\";\nimport { createNewAd } from \"./adService\";\nimport { User } from \"types/user\";\nimport { BaseAd } from \"types/ad\";\nimport { NewMessageData, ResolveParseData } from \"types/parseData\";\nimport Logger from \"packages/Logger\";\nimport { sentryInfo, sentryError, sentrySuccessLog } from \"./sentryHandlers\";\n\nconst {\n    TELEGRAM_API_ID,\n    TELEGRAM_API_HASH,\n    TELEGRAM_SESSION_ID,\n    OPEN_AI_KEY,\n    OPEN_AI_ORG_ID,\n    OPEN_AI_PROJECT_ID,\n} = process.env;\n\nconst telegramBot = new TelegramBot(\n    Number(TELEGRAM_API_ID),\n    TELEGRAM_API_HASH,\n    TELEGRAM_SESSION_ID\n);\n\nconst gptClient = new GPTClient(OPEN_AI_KEY, OPEN_AI_ORG_ID, OPEN_AI_PROJECT_ID);\n\nconst logger = new Logger({ service: \"PARSE DATA SERVICE\" });\n\nexport function startBot() {\n    telegramBot.startBot();\n}\n\nexport async function getNormalizedData(message: string) {\n    try {\n        const response = await gptClient.parseMessage(message);\n        if (response) {\n            const ads = JSON.parse(response) as ResolveParseData;\n            logger.infoLogging({\n                message: \"[Successfully Normalized!]\\n\",\n            });\n            sentryInfo({ message: \"[Successfully Normalized!]\" });\n            return ads;\n        } else {\n            return;\n        }\n    } catch (error) {\n        if (error instanceof OpenAI.APIError) {\n            const message = `[Failed To Normalized]\\n ${error.message}\\n`;\n            logger.errorLogging({\n                message: message,\n            });\n            sentryError({ message });\n        } else {\n            console.error(\"[Failed To Normalized]: Unknown error occur: \" + error);\n        }\n    }\n}\n\nasync function getMediaUrl(data: NewMessageData, title: string) {\n    try {\n        const tempArray: string[] = [];\n        if (data.photo) {\n            const url = (await S3.uploadSingleImage(data.photo, title)) as string;\n            tempArray.push(url);\n            logger.infoLogging({\n                message: \"[Successfully get media url!]\\n\",\n            });\n            sentryInfo({ message: \"[Successfully get media url!]\" });\n            return tempArray;\n        } else if (data.photos) {\n            const urlList = (await S3.uploadMultipleImage(\n                data.photos,\n                title\n            )) as string[];\n            logger.infoLogging({\n                message: \"[Successfully get media urls!]\\n\",\n            });\n            sentryInfo({ message: \"[Successfully get media url!]\" });\n            return urlList;\n        }\n    } catch (error) {\n        if (error instanceof S3ServiceException) {\n            const message = `[Failed To GetURL] \\n[Name]: ${error.name} \\n[Message]: ${error.message}`;\n            logger.errorLogging({\n                message: message,\n            });\n            sentryError({ message });\n        } else {\n            console.error(\"[Failed To GetURL]: Unknown error occur: \" + error);\n        }\n    }\n}\n\nasync function removeMedia(urls: string[], title: string) {\n    try {\n        const pattern = new RegExp(/[\\s\\p{P}]+/gu);\n        const convertTitle = title.replace(pattern, \"_\").toLowerCase();\n        if (urls.length > 1) {\n            const keys = urls.sort().map((url, i) => {\n                const startIndex = url.indexOf(convertTitle + \"_\" + (i + 1));\n                const key = url.substring(startIndex, url.length);\n                return key;\n            });\n            await S3.deleteMultipleImage(keys);\n        } else if (urls.length <= 1) {\n            const singleUrl = urls[0];\n            const startIndex = singleUrl.indexOf(convertTitle);\n            const key = singleUrl.substring(startIndex, singleUrl.length);\n            await S3.deleteSingleImage(key);\n        }\n    } catch (error) {\n        if (error instanceof S3ServiceException) {\n            const message = `[Failed To Remove Media] \\n[Name]: ${error.name} \\n[Message]: ${error.message}`;\n            logger.errorLogging({\n                message: message,\n            });\n        } else {\n            console.error(\"[Failed To Remove Media]: Unknown error occur: \" + error);\n        }\n    }\n}\n\nexport async function parseData() {\n    try {\n        telegramBot.runNewMessageEvent(async (messageData) => {\n            logger.infoLogging({\n                message: \"[Starting parse data...]\\n\",\n            });\n            sentryInfo({ message: \"[Starting parse data...]\" });\n            const userData = messageData.user as User;\n            const adsData = await getNormalizedData(messageData.message);\n            if (adsData) {\n                let user: User;\n                const existingUser = await isUserExist(userData);\n                if (existingUser) {\n                    user = existingUser;\n                } else {\n                    user = (await createNewUser(userData)) as User;\n                }\n                const mediaUrl = await getMediaUrl(messageData, adsData.title);\n                const newAd: BaseAd = {\n                    userId: user.id,\n                    title: adsData.title,\n                    description: adsData.description,\n                    price: adsData.price,\n                    currency: adsData.currency,\n                    source: \"TELEGRAM_AD\",\n                    location: {\n                        country: \"Georgia\",\n                        city: \"Tbilisi\",\n                        location: adsData.location,\n                    },\n                };\n                if (mediaUrl) {\n                    const response = await createNewAd(newAd, mediaUrl);\n                    if (!response) {\n                        removeMedia(mediaUrl, newAd.title);\n                    } else {\n                        const message =\n                            \"Message parse: \" +\n                            messageData.message +\n                            \" -> Final result: \" +\n                            JSON.stringify(response);\n                        sentrySuccessLog({ message });\n                        logger.infoLogging({\n                            message: \"[Successfully Parse Data!]\\n\",\n                        });\n                        sentryInfo({ message: \"[Successfully Parse Data!]\" });\n                    }\n                }\n            } else {\n                return;\n            }\n        });\n    } catch (error) {\n        if (error instanceof Error) {\n            const message = `[Failed To ParseData] \\n[Name]: ${error.name} \\n[Message]: ${error.message}`;\n            logger.errorLogging({\n                message: message,\n            });\n            sentryError({ message });\n        } else {\n            console.error(\"[Failed To Parse Data]: Unknown error occur: \" + error);\n        }\n    }\n}\n"]}