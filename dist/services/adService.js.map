{"version":3,"file":"adService.js","sourceRoot":"/","sources":["services/adService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,EAAE,MAAM,WAAW,CAAC;AAE3B,OAAO,MAAM,MAAM,iBAAiB,CAAC;AACrC,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAE3D,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,EAAE,OAAO,EAAE,aAAa,EAAE,CAAC,CAAC;AAEtD,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,MAAc,EAAE,IAAc;IAC5D,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;QACnB,OAAO;IACX,CAAC;IACD,IAAI,CAAC;QACD,MAAM,KAAK,GAAG,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC;QAC7B,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;YAC7B,OAAO;gBACH,GAAG,EAAE,CAAC;aACT,CAAC;QACN,CAAC,CAAC,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC;YACf,OAAO,EAAE,+BAA+B;SAC3C,CAAC,CAAC;QACH,UAAU,CAAC,EAAE,OAAO,EAAE,8BAA8B,EAAE,CAAC,CAAC;QACxD,OAAO,QAAQ,CAAC;IACpB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,IAAI,KAAK,YAAY,MAAM,CAAC,6BAA6B,EAAE,CAAC;YACxD,MAAM,OAAO,GAAG,8BAA8B,KAAK,CAAC,OAAO,EAAE,CAAC;YAC9D,MAAM,CAAC,YAAY,CAAC;gBAChB,OAAO,EAAE,OAAO;aACnB,CAAC,CAAC;YACH,WAAW,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QAC7B,CAAC;aAAM,CAAC;YACJ,OAAO,CAAC,KAAK,CAAC,2CAA2C,GAAG,KAAK,CAAC,CAAC;QACvE,CAAC;IACL,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,QAAQ,CAAC,KAAa;IACxC,IAAI,CAAC,KAAK,EAAE,CAAC;QACT,OAAO;IACX,CAAC;IACD,IAAI,CAAC;QACD,MAAM,QAAQ,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC;YACf,OAAO,EAAE,4BAA4B;SACxC,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;IACpB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,IAAI,KAAK,YAAY,MAAM,CAAC,6BAA6B,EAAE,CAAC;YACxD,MAAM,OAAO,GAAG,0BAA0B,KAAK,CAAC,OAAO,EAAE,CAAC;YAC1D,MAAM,CAAC,YAAY,CAAC;gBAChB,OAAO,EAAE,OAAO;aACnB,CAAC,CAAC;QACP,CAAC;aAAM,CAAC;YACJ,OAAO,CAAC,KAAK,CAAC,uCAAuC,GAAG,KAAK,CAAC,CAAC;QACnE,CAAC;IACL,CAAC;AACL,CAAC","sourcesContent":["import { Prisma } from \"@prisma/client\";\nimport Ad from \"models/Ad\";\nimport { BaseAd } from \"types/ad\";\nimport Logger from \"packages/Logger\";\nimport { sentryInfo, sentryError } from \"./sentryHandlers\";\n\nconst logger = new Logger({ service: \"ADs SERVICE\" });\n\nexport async function createNewAd(adData: BaseAd, urls: string[]) {\n    if (!adData || !urls) {\n        return;\n    }\n    try {\n        const newAd = new Ad(adData);\n        const imagesUrl = urls.map((u) => {\n            return {\n                url: u,\n            };\n        });\n        const response = await newAd.insertNewAd(imagesUrl);\n        logger.infoLogging({\n            message: \"[Successfully Added New Ad]\\n\",\n        });\n        sentryInfo({ message: \"[Successfully Added New Ad!]\" });\n        return response;\n    } catch (error) {\n        if (error instanceof Prisma.PrismaClientKnownRequestError) {\n            const message = `[Failed To Create New Ad]\\n${error.message}`;\n            logger.errorLogging({\n                message: message,\n            });\n            sentryError({ message });\n        } else {\n            console.error(\"[Unknown Error Occur In Create New Ad]:\\n\" + error);\n        }\n    }\n}\n\nexport async function removeAd(adsId: string) {\n    if (!adsId) {\n        return;\n    }\n    try {\n        const response = await Ad.removeAd(adsId);\n        logger.infoLogging({\n            message: \"[Successfully Remove Ad]\\n\",\n        });\n        return response;\n    } catch (error) {\n        if (error instanceof Prisma.PrismaClientKnownRequestError) {\n            const message = `[Failed To Remove Ad]\\n${error.message}`;\n            logger.errorLogging({\n                message: message,\n            });\n        } else {\n            console.error(\"[Unknown Error Occur In Remove Ad]:\\n\" + error);\n        }\n    }\n}\n"]}