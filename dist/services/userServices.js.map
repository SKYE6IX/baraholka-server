{"version":3,"file":"userServices.js","sourceRoot":"/","sources":["services/userServices.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,IAAI,MAAM,aAAa,CAAC;AAE/B,OAAO,MAAM,MAAM,iBAAiB,CAAC;AACrC,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAE3D,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC,CAAC;AAEvD,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,QAAkB;IAChD,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;QACvB,OAAO,IAAI,CAAC;IAChB,CAAC;IACD,IAAI,CAAC;QACD,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAClE,MAAM,CAAC,WAAW,CAAC;YACf,OAAO,EAAE,8BAA8B;SAC1C,CAAC,CAAC;QACH,UAAU,CAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,CAAC,CAAC;QACtD,OAAO,YAAY,CAAC;IACxB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,IAAI,KAAK,YAAY,MAAM,CAAC,6BAA6B,EAAE,CAAC;YACxD,MAAM,OAAO,GAAG,oCAAoC,KAAK,CAAC,OAAO,EAAE,CAAC;YACpE,MAAM,CAAC,YAAY,CAAC;gBAChB,OAAO,EAAE,OAAO;aACnB,CAAC,CAAC;YACH,WAAW,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QAC7B,CAAC;aAAM,CAAC;YACJ,OAAO,CAAC,KAAK,CAAC,uCAAuC,GAAG,KAAK,CAAC,CAAC;QACnE,CAAC;IACL,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,QAAkB;IAClD,IAAI,CAAC,QAAQ,EAAE,CAAC;QACZ,OAAO,IAAI,CAAC;IAChB,CAAC;IACD,IAAI,CAAC;QACD,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;QAChC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;QAC3C,MAAM,CAAC,WAAW,CAAC;YACf,OAAO,EAAE,kCAAkC;SAC9C,CAAC,CAAC;QACH,UAAU,CAAC,EAAE,OAAO,EAAE,gCAAgC,EAAE,CAAC,CAAC;QAC1D,OAAO,OAAO,CAAC;IACnB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,IAAI,KAAK,YAAY,MAAM,CAAC,6BAA6B,EAAE,CAAC;YACxD,MAAM,OAAO,GAAG,iCAAiC,KAAK,CAAC,OAAO,EAAE,CAAC;YACjE,MAAM,CAAC,YAAY,CAAC;gBAChB,OAAO,EAAE,OAAO;aACnB,CAAC,CAAC;YACH,WAAW,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QAC7B,CAAC;aAAM,CAAC;YACJ,OAAO,CAAC,KAAK,CAAC,6CAA6C,GAAG,KAAK,CAAC,CAAC;QACzE,CAAC;IACL,CAAC;AACL,CAAC","sourcesContent":["import { Prisma } from \"@prisma/client\";\nimport User from \"models/User\";\nimport { BaseUser } from \"types/user\";\nimport Logger from \"packages/Logger\";\nimport { sentryInfo, sentryError } from \"./sentryHandlers\";\n\nconst logger = new Logger({ service: \"USER SERVICE\" });\n\nexport async function isUserExist(userData: BaseUser) {\n    if (!userData.telegramId) {\n        return null;\n    }\n    try {\n        const existingUser = await User.existingUser(userData.telegramId);\n        logger.infoLogging({\n            message: \"[Successfully Found User!]\\n\",\n        });\n        sentryInfo({ message: \"[Successfully Found User!]\" });\n        return existingUser;\n    } catch (error) {\n        if (error instanceof Prisma.PrismaClientKnownRequestError) {\n            const message = `[Failed To Find Existing User]\\n ${error.message}`;\n            logger.errorLogging({\n                message: message,\n            });\n            sentryError({ message });\n        } else {\n            console.error(\"[Unknown Error Occur In Find User]:\\n\" + error);\n        }\n    }\n}\n\nexport async function createNewUser(userData: BaseUser) {\n    if (!userData) {\n        return null;\n    }\n    try {\n        const user = new User(userData);\n        const newUser = await user.insertNewUser();\n        logger.infoLogging({\n            message: \"[Successfully Added New User!]\\n\",\n        });\n        sentryInfo({ message: \"[Successfully Added New User!]\" });\n        return newUser;\n    } catch (error) {\n        if (error instanceof Prisma.PrismaClientKnownRequestError) {\n            const message = `[Failed To Create New User]\\n ${error.message}`;\n            logger.errorLogging({\n                message: message,\n            });\n            sentryError({ message });\n        } else {\n            console.error(\"[Unknown Error Occur In Create New User]:\\n\" + error);\n        }\n    }\n}\n"]}