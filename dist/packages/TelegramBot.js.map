{"version":3,"file":"TelegramBot.js","sourceRoot":"/","sources":["packages/TelegramBot.ts"],"names":[],"mappings":"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","sourcesContent":["import { TelegramClient } from \"telegram\";\nimport { StringSession } from \"telegram/sessions\";\nimport { NewMessage, NewMessageEvent } from \"telegram/events\";\nimport readlineSync from \"readline-sync\";\nimport { NewMessageData } from \"types/parseData\";\nclass TelegramBot {\n    private client: TelegramClient;\n    private timeoutID: NodeJS.Timeout | null = null;\n\n    constructor(apiId: number, apiHash: string, sessionsId: string) {\n        this.client = new TelegramClient(new StringSession(sessionsId), apiId, apiHash, {\n            connectionRetries: 5,\n            useWSS: true,\n        });\n    }\n\n    public async startBot() {\n        await this.client.start({\n            phoneNumber: async () =>\n                new Promise((resolve) => resolve(readlineSync.question(\"Number ?\"))),\n            password: async () =>\n                new Promise((resolve) => resolve(readlineSync.question(\"Password ?\"))),\n            phoneCode: async () =>\n                new Promise((resolve) => resolve(readlineSync.question(\"OTP ?\"))),\n            onError: (err) => console.log(err),\n        });\n        this.client.session.save();\n    }\n\n    public async runNewMessageEvent(onNewMessage: (newMessage: NewMessageData) => void) {\n        const isConnected = await this.client.connect();\n        if (isConnected) {\n            const groupMessage = new Map<number, NewMessageData>();\n            this.client.addEventHandler(\n                async (event: NewMessageEvent) => {\n                    const message = event.message;\n                    // @ts-expect-error Type username isn't added on sender type.\n                    const userName = await message.sender?.username;\n                    const media = message.media;\n                    if (userName && media) {\n                        const buffer = (await this.client.downloadMedia(media)) as Buffer;\n                        if (message.groupedId) {\n                            // Message with multiple images\n                            if (\n                                !groupMessage.has(message.groupedId.valueOf()) &&\n                                message.message\n                            ) {\n                                groupMessage.set(message.groupedId.valueOf(), {\n                                    message: message.text,\n                                    user: {\n                                        telegramId:\n                                            message.sender?.id &&\n                                            BigInt(message.sender?.id.toString()),\n                                        userName: userName,\n                                    },\n                                    photo: null,\n                                    photos: [],\n                                });\n                            }\n                            const getMessages = groupMessage.get(\n                                message.groupedId.valueOf()\n                            ) as NewMessageData;\n                            getMessages.photos.push(buffer);\n                            if (this.timeoutID) clearTimeout(this.timeoutID);\n                            this.timeoutID = setTimeout(() => {\n                                onNewMessage(getMessages);\n                            }, 2500);\n                        } else {\n                            // Message with single image\n                            onNewMessage({\n                                message: message.text,\n                                user: {\n                                    telegramId:\n                                        message.sender?.id &&\n                                        BigInt(message.sender?.id.toString()),\n                                    userName: userName,\n                                },\n                                photo: buffer,\n                                photos: [],\n                            });\n                        }\n                    } else {\n                        console.log(\n                            \"Failed to process new message because there is no media or username\"\n                        );\n                        return;\n                    }\n                },\n                new NewMessage({\n                    chats: [\"testch1992\", \"market_place1992\"],\n                })\n            );\n        } else {\n            console.log(\"GramJS Bot is unable to connect........\");\n            return;\n        }\n    }\n}\n\nexport default TelegramBot;\n"]}