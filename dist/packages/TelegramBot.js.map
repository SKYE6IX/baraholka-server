{"version":3,"file":"TelegramBot.js","sourceRoot":"/","sources":["packages/TelegramBot.ts"],"names":[],"mappings":"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","sourcesContent":["import { TelegramClient, Api } from \"telegram\";\nimport { StringSession } from \"telegram/sessions\";\nimport { NewMessage, NewMessageEvent } from \"telegram/events\";\nimport readlineSync from \"readline-sync\";\nimport { NewMessageData } from \"types/parseData\";\nclass TelegramBot {\n    private client: TelegramClient;\n    private timeoutID: NodeJS.Timeout | null = null;\n    private timeRemain = 500;\n\n    private singleMediaAds: NewMessageData[] = [];\n    private multiMediaAds = new Map<number, NewMessageData>();\n\n    constructor(apiId: number, apiHash: string, sessionsId: string) {\n        this.client = new TelegramClient(new StringSession(sessionsId), apiId, apiHash, {\n            connectionRetries: 5,\n        });\n    }\n\n    public async startBot() {\n        await this.client.start({\n            phoneNumber: async () =>\n                new Promise((resolve) => resolve(readlineSync.question(\"Number ?\"))),\n            password: async () =>\n                new Promise((resolve) => resolve(readlineSync.question(\"Password ?\"))),\n            phoneCode: async () =>\n                new Promise((resolve) => resolve(readlineSync.question(\"OTP ?\"))),\n            onError: (err) => console.log(err),\n        });\n        this.client.session.save();\n    }\n\n    private async resolveAds({ message }: { message: Api.Message }) {\n        let adData: NewMessageData;\n        try {\n            // @ts-expect-error Type username isn't added on siender type.\n            const userName = message.sender?.username;\n            const media = message.media;\n            const groupedId = message.groupedId?.valueOf();\n            if (userName && media) {\n                if (!groupedId) {\n                    const buffer = (await this.client.downloadMedia(media)) as Buffer;\n                    adData = {\n                        message: message.text,\n                        user: {\n                            userName: userName,\n                            telegramId:\n                                message.sender?.id &&\n                                BigInt(message.sender?.id.toString()),\n                        },\n                        photo: buffer,\n                        photos: [],\n                    };\n                    this.singleMediaAds.push(adData);\n                } else if (groupedId) {\n                    const buffer = (await this.client.downloadMedia(media)) as Buffer;\n                    if (!this.multiMediaAds.has(groupedId)) {\n                        this.multiMediaAds.set(groupedId, {\n                            message: message.message,\n                            user: {\n                                userName: userName,\n                                telegramId:\n                                    message.sender?.id &&\n                                    BigInt(message.sender?.id.toString()),\n                            },\n                            photo: null,\n                            photos: [buffer],\n                        });\n                    } else {\n                        this.multiMediaAds.forEach((ads, key) => {\n                            if (key === groupedId) {\n                                ads.photos.push(buffer);\n                            }\n                        });\n                    }\n                }\n            } else {\n                console.log(\"Username and Media isn't included in the message\");\n            }\n        } catch (error) {\n            throw new Error(\"Error occur inside resolve ads block. \" + error);\n        }\n    }\n\n    public async runNewMessageEvent(onNewMessage: (newMessage: NewMessageData) => void) {\n        const isConnected = await this.client.connect();\n        if (isConnected) {\n            this.client.addEventHandler(\n                async (event: NewMessageEvent) => {\n                    const message = event.message;\n                    this.resolveAds({ message })\n                        .then(() => {\n                            if (this.timeoutID) {\n                                clearTimeout(this.timeoutID);\n                                this.timeoutID = null;\n                            }\n                            this.timeoutID = setTimeout(() => {\n                                if (this.singleMediaAds.length) {\n                                    this.singleMediaAds.forEach((data) => {\n                                        onNewMessage(data);\n                                    });\n                                    this.singleMediaAds = [];\n                                }\n                                if (this.multiMediaAds) {\n                                    this.multiMediaAds.forEach((ads) => {\n                                        onNewMessage(ads);\n                                    });\n                                    this.multiMediaAds.clear();\n                                }\n                            }, this.timeRemain);\n                        })\n                        .catch((error) => {\n                            console.log(error);\n                        });\n                },\n                new NewMessage({\n                    chats: [\"testch1992\", \"market_place1992\"],\n                })\n            );\n        } else {\n            console.log(\"GramJS Bot is unable to connect........\");\n            return;\n        }\n    }\n}\nexport default TelegramBot;\n"]}