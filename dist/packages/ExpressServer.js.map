{"version":3,"file":"ExpressServer.js","sourceRoot":"/","sources":["packages/ExpressServer.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { Express, Router, Request, Response, NextFunction } from \"express\";\nimport http, { Server } from \"http\";\nimport cors, { CorsOptions } from \"cors\";\nimport expressSession, { SessionOptions } from \"express-session\";\nimport { PrismaSessionStore } from \"@quixo3/prisma-session-store\";\nimport { PrismaClient } from \"@prisma/client\";\nimport * as Sentry from \"@sentry/node\";\nimport passport from \"passport\";\nclass ExpressServer {\n    private app: Express;\n    private serverHandler: Server;\n    private PORT = process.env.PORT || 8080;\n    private isProduction = process.env.NODE_ENV === \"production\";\n\n    constructor() {\n        this.app = express();\n        this.serverHandler = http.createServer(this.app);\n    }\n\n    private setCors() {\n        const corsOption: CorsOptions = {\n            origin: process.env.FRONTEND_URL || \"http://localhost:3000\",\n            credentials: true,\n        };\n        return cors(corsOption);\n    }\n\n    private setSession() {\n        const options: SessionOptions = {\n            cookie: {\n                httpOnly: true,\n                secure: this.isProduction,\n                maxAge: 7 * 24 * 60 * 60 * 1000,\n            },\n            name: \"reMarketSession\",\n            secret: process.env.SESSION_SECRET,\n            resave: true,\n            saveUninitialized: true,\n            store: new PrismaSessionStore(new PrismaClient(), {\n                checkPeriod: 2 * 60 * 1000,\n                dbRecordIdIsSessionId: true,\n                dbRecordIdFunction: undefined,\n            }),\n        };\n        if (this.isProduction) {\n            this.app.set(\"trust proxy\", 1);\n            if (options.cookie) options.cookie.secure = true;\n        }\n        return expressSession(options);\n    }\n\n    private setPassportConfig() {\n        this.app.use(passport.initialize());\n        this.app.use(passport.session());\n        passport.serializeUser((user, done) => done(null, user));\n        passport.deserializeUser((user, done) => done(null, user as Express.User));\n    }\n\n    public setAppConfig() {\n        this.app.use(express.urlencoded({ extended: true }));\n        this.app.use(express.json());\n        this.app.use(this.setCors());\n        this.app.use(this.setSession());\n        this.setPassportConfig();\n    }\n\n    public routes(route: Router) {\n        this.app.use(route);\n        this.app.use(\"/debug-sentry\", (req, res) => {\n            res.send(\"Hello Sanity\");\n            throw new Error(\"Testing Sentry Error\");\n        });\n    }\n\n    public defaultErrorHandler() {\n        Sentry.setupExpressErrorHandler(this.app);\n        this.app.use((err, req: Request, res: Response, next: NextFunction) => {\n            res.statusCode = 500;\n            res.end(res.sentry + \"\\n\");\n        });\n    }\n\n    public startServer() {\n        this.serverHandler.listen(this.PORT, () => {\n            console.log(\"Server start running on port \" + this.PORT);\n        });\n    }\n}\n\nexport default ExpressServer;\n"]}