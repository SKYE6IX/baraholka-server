{"version":3,"file":"S3.js","sourceRoot":"/","sources":["packages/S3.ts"],"names":[],"mappings":"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","sourcesContent":["import \"dotenv/config\";\nimport {\n    S3Client,\n    PutObjectCommand,\n    DeleteObjectCommand,\n    DeleteObjectsCommand,\n} from \"@aws-sdk/client-s3\";\nimport sharp from \"sharp\";\nimport { fromEnv } from \"@aws-sdk/credential-providers\";\n\nclass S3 {\n    private static instance: S3;\n    // @ts-expect-error The insance is a sigleton\n    private s3Client: S3Client;\n\n    constructor() {\n        if (!S3.instance) {\n            this.s3Client = new S3Client({\n                region: process.env.AWS_REGION,\n                credentials: fromEnv(),\n            });\n            S3.instance = this;\n        } else {\n            return S3.instance;\n        }\n    }\n\n    private static replaceTitle(title: string) {\n        const pattern = new RegExp(/[\\s\\p{P}]+/gu);\n        if (pattern.test(title)) {\n            return title.replace(pattern, \"_\").toLowerCase();\n        } else {\n            return title.toLowerCase();\n        }\n    }\n\n    private static getUrl(key: string) {\n        const { AWS_BUCKET, AWS_REGION } = process.env;\n        return `https://${AWS_BUCKET}.s3.${AWS_REGION}.amazonaws.com/${key}`;\n    }\n\n    public static async uploadSingleImage(imageBuffer: Buffer, adTitle: string) {\n        const format = (await sharp(imageBuffer).metadata()).format;\n        const title = this.replaceTitle(adTitle);\n        const key = `${title}.${format}`;\n        await this.instance.s3Client.send(\n            new PutObjectCommand({\n                Bucket: process.env.AWS_BUCKET,\n                Body: imageBuffer,\n                Key: key,\n                ContentType: `image/${format}`,\n            })\n        );\n        return this.getUrl(key);\n    }\n\n    public static async uploadMultipleImage(imageBuffers: Buffer[], adTitle: string) {\n        let prefixNum = 1;\n        const urlList: string[] = [];\n        const title = this.replaceTitle(adTitle);\n        const photos = imageBuffers.map(async (buf) => {\n            const format = (await sharp(buf).metadata()).format;\n            return {\n                Key: `${title + \"_\" + prefixNum++}.${format}`,\n                Body: buf,\n                ContentType: `image/${format}`,\n            };\n        });\n        for (const photo of photos) {\n            await this.instance.s3Client.send(\n                new PutObjectCommand({\n                    Bucket: \"remarket-ads\",\n                    Body: (await photo).Body,\n                    Key: (await photo).Key,\n                    ContentType: (await photo).ContentType,\n                })\n            );\n            const url = this.getUrl((await photo).Key);\n            urlList.push(url);\n        }\n        return urlList;\n    }\n\n    public static async deleteSingleImage(key: string) {\n        const response = await this.instance.s3Client.send(\n            new DeleteObjectCommand({\n                Bucket: process.env.AWS_BUCKET,\n                Key: key,\n            })\n        );\n        return response;\n    }\n\n    public static async deleteMultipleImage(keys: string[]) {\n        const response = await this.instance.s3Client.send(\n            new DeleteObjectsCommand({\n                Bucket: process.env.AWS_BUCKET,\n                Delete: {\n                    Objects: keys.map((key) => ({ Key: key })),\n                },\n            })\n        );\n        return response;\n    }\n}\nexport default S3;\n"]}