{"version":3,"file":"Logger.js","sourceRoot":"/","sources":["packages/Logger.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,SAAS,CAAC;AAE9B,MAAM,MAAM;IAER,YAAY,EAAE,OAAO,EAAuB;QACxC,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;QAChE,MAAM,SAAS,GAAG,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,EAAE,EAAE;YACvD,OAAO,IAAI,SAAS,MAAM,KAAK,MAAM,OAAO,MAAM,OAAO,EAAE,CAAC;QAChE,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC;YAC/B,WAAW,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE;YACjC,MAAM,EAAE,OAAO,CACX,SAAS,CAAC,EAAE,MAAM,EAAE,qBAAqB,EAAE,CAAC,EAC5C,QAAQ,EAAE,EACV,SAAS,CACZ;YACD,UAAU,EAAE;gBACR,wEAAwE;gBACxE,0EAA0E;gBAC1E,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE;aACnC;SACJ,CAAC,CAAC;IACP,CAAC;IAEM,WAAW,CAAC,EAAE,OAAO,EAAuB;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAEM,YAAY,CAAC,EAAE,OAAO,EAAuB;QAChD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;CACJ;AAED,eAAe,MAAM,CAAC","sourcesContent":["import winston from \"winston\";\n\nclass Logger {\n    private logger: winston.Logger;\n    constructor({ service }: { service: string }) {\n        const { combine, timestamp, printf, colorize } = winston.format;\n        const logFormat = printf(({ level, message, timestamp }) => {\n            return `[${timestamp}] [${level}] [${service}]: ${message}`;\n        });\n        this.logger = winston.createLogger({\n            defaultMeta: { service: service },\n            format: combine(\n                timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n                colorize(),\n                logFormat\n            ),\n            transports: [\n                // new winston.transports.File({ filename: \"info.log\", level: \"info\" }),\n                // new winston.transports.File({ filename: \"error.log\", level: \"error\" }),\n                new winston.transports.Console(),\n            ],\n        });\n    }\n\n    public infoLogging({ message }: { message: string }) {\n        this.logger.info(message);\n    }\n\n    public errorLogging({ message }: { message: string }) {\n        this.logger.error(message);\n    }\n}\n\nexport default Logger;\n"]}